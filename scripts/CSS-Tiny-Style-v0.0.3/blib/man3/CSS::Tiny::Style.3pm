.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CSS::Tiny::Style 3"
.TH CSS::Tiny::Style 3 "2009-07-16" "perl v5.10.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CSS::Tiny::Style \- Object oriented interface to CSS stylesheets
.SH "VERSION"
.IX Header "VERSION"
This document describes CSS::Tiny::Style version 0.0.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    # simple example
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    use CSS::Tiny;
\&    use CSS::Tiny::Style;
\&    use HTML::Element; 
\&
\&    $el = HTML::Element\->new(\*(Aqp\*(Aq);
\&    $el\->attr(\*(Aqclass\*(Aq, \*(Aqmyclass\*(Aq);
\&
\&    $cts = CSS::Tiny::Style\->new(\*(Aqp.myclass\*(Aq)
\&    $cts\->match($el) # return true
\&
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    # more interesting example
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    # inline a stylesheet onto the single HTML elements
\&    #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    use HTML::TreeBuilder;
\&
\&
\&    my $tree = HTML::TreeBuilder\->new();
\&    $tree\->parse_file(\*(Aqfilename.html\*(Aq);
\&
\&    $css = CSS::Tiny\->read( \*(Aqstylesheet.css\*(Aq );
\&
\&    for my $el ($tree\->descendants) {
\&        for my $st ($css\->styles) {
\&            if ($st\->match($el)) {
\&                $st\->add_style($el);
\&            }
\&        }
\&    }
\&    print $tree\->as_HTML;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "INTERFACE"
.IX Header "INTERFACE"
.Sh "Constructor"
.IX Subsection "Constructor"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 2
\&  my $selector_string = \*(Aqdiv.index li.new\*(Aq;
\&  my $style = CSS::Tiny::Style\->new($selector_string);
.Ve
.PP
Returns a new CSS::Tiny::Style object
.Sh "Using with CSS::Tiny"
.IX Subsection "Using with CSS::Tiny"
CSS::Tiny::Styles provides two additional methods to CSS::Tiny, making
it possible to generate CSS::Tiny::Styles on the fly by parsing a stylesheet like this:
.PP
.Vb 1
\&    $css = CSS::Tiny\->read( \*(Aqstylesheet.css\*(Aq );
.Ve
.PP
\fICSS::Tiny\->styles\fR
.IX Subsection "CSS::Tiny->styles"
.PP
.Vb 1
\&    @styles = CSS::Tiny\->styles
.Ve
.PP
Returns a list of CSS::Tiny::Style objects made up of all the style definitions in CSS::Tiny
.PP
\fICSS::Tiny\->selectors\fR
.IX Subsection "CSS::Tiny->selectors"
.PP
.Vb 1
\&    @selectors = CSS::Tiny\->selectors
.Ve
.PP
Returns a list of selector strings in the CSS::Tiny object
.Sh "Selectors"
.IX Subsection "Selectors"
\fItag\fR
.IX Subsection "tag"
.PP
.Vb 2
\&  my $style = CSS::Tiny::Style\->new(\*(Aqpre\*(Aq);
\&  print $style\->tag; # prints "pre"
.Ve
.PP
Returns the tag part of the selector
.PP
\fIid\fR
.IX Subsection "id"
.PP
.Vb 2
\&  my $style = CSS::Tiny::Style\->new(\*(Aqli#leftmenu\*(Aq);
\&  print $style\->id; # prints "leftmenu"
.Ve
.PP
Returns the id part of the selector
.PP
\fIclass\fR
.IX Subsection "class"
.PP
.Vb 2
\&  my $style = CSS::Tiny::Style\->new(\*(Aqp.big\*(Aq);
\&  print $style\->class; # prints "big"
.Ve
.PP
Returns the class part of the selector
.PP
\fIselector\fR
.IX Subsection "selector"
.PP
.Vb 2
\&  my $style = CSS::Tiny::Style\->new(\*(Aqdiv.sidebar p.new\*(Aq);
\&  print $style\->selector; # prints "div.sidebar p.new"
.Ve
.PP
Returns the selector string
.PP
\fIselector_array\fR
.IX Subsection "selector_array"
.PP
.Vb 4
\&  my $style = CSS::Tiny::Style\->new(\*(Aqdiv.main div.sidebar > p.new\*(Aq);
\&  @sel_arr = $style\->selector_array;
\&  print join "::" @sel_arr;
\&  # prints
.Ve
.PP
Returns an array of element tags (i.e: p.important) alternated with
strings derived from relative selectors (i.e.: the \*(L">\*(R" or \*(L"+\*(R" or \*(L" \*(R"
between element tags.
.PP
Relative selectors are transformed as follows:
.PP
\&'+' becomes 'left'
.PP
\&'>' becomes 'parent'
.PP
\&' ' becomes 'lineage'
.PP
\fIselarr\fR
.IX Subsection "selarr"
.PP
selarr is an alias for selector_array
.Sh "Specificity"
.IX Subsection "Specificity"
\fIspecificity\fR
.IX Subsection "specificity"
.PP
.Vb 2
\&  my $style = CSS::Tiny::Style\->new(\*(Aqh1.menu li.myclass\*(Aq);
\&  print $style\->specificity # prints 22
.Ve
.PP
Returns the selector's specificity as described in
<http://www.w3.org/TR/CSS21/cascade.html#specificity>. A base 100 is
used.
.PP
\fIcount_tags\fR
.IX Subsection "count_tags"
.PP
.Vb 2
\&  my $style = CSS::Tiny::Style\->new(\*(Aqh1.menu li.myclass #foo\*(Aq);
\&  print $style\->count_tags # prints 2
.Ve
.PP
Return the number of tags in the selector
.PP
\fIcount_ids\fR
.IX Subsection "count_ids"
.PP
.Vb 2
\&  my $style = CSS::Tiny::Style\->new(\*(Aqh1#bar li.myclass #foo\*(Aq);
\&  print $style\->count_ids # prints 2
.Ve
.PP
Return the number of ids in the selector
.PP
\fIcount_attributes\fR
.IX Subsection "count_attributes"
.PP
.Vb 2
\&  my $style = CSS::Tiny::Style\->new(\*(Aqh1.menu li #foo\*(Aq);
\&  print $style\->count_attributes # prints 1
.Ve
.PP
Return the number of attributes in the selector
.Sh "Matching and inlining"
.IX Subsection "Matching and inlining"
\fImatch\fR
.IX Subsection "match"
.PP
.Vb 2
\&    $el = HTML::Element\->new(\*(Aqp\*(Aq);
\&    $el\->attr(\*(Aqclass\*(Aq, \*(Aqmyclass\*(Aq);
\&
\&    $cts = CSS::Tiny::Style\->new(\*(Aqp.myclass\*(Aq)
\&    $cts\->match($el) # return true
.Ve
.PP
Returns true if the style selector matches on the HTML::Element
object, taking into account all its relatives (siblings, ancestors,
parent).
.PP
\fIelement_match\fR
.IX Subsection "element_match"
.PP
.Vb 2
\&    $el = HTML::Element\->new(\*(Aqp\*(Aq);
\&    $el\->attr(\*(Aqclass\*(Aq, \*(Aqmyclass\*(Aq);
\&
\&    $cts = CSS::Tiny::Style\->new(\*(Aqp.myclass\*(Aq)
\&    $cts\->element_match($el) # return true
.Ve
.PP
Returns true if the style selector matches on the HTML::Element object
without taking into account the ancestors.
.PP
\fIadd_to\fR
.IX Subsection "add_to"
.PP
Inlines the style definition into the element.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
.Vb 2
\&  CSS::Tiny
\&  HTML::Element
.Ve
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS"
.IX Header "BUGS"
No bugs have yet been reported.
.PP
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-css\-tiny\-style@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.Sh "Attribute selectors"
.IX Subsection "Attribute selectors"
Does not handle E[foo] type selectors
.Sh "Repeated properties"
.IX Subsection "Repeated properties"
Allows duplicated setting of the same property in a inline style definition
.Sh "Inheritance"
.IX Subsection "Inheritance"
Does not handle inherited properties
.SH "AUTHOR"
.IX Header "AUTHOR"
Simone Cesano  \f(CW\*(C`<scesano@cpan.org>\*(C'\fR
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Simone Cesano \f(CW\*(C`<scesano@cpan.org>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE\s0 \s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1LICENSED\s0 \s-1FREE\s0 \s-1OF\s0 \s-1CHARGE\s0, \s-1THERE\s0 \s-1IS\s0 \s-1NO\s0 \s-1WARRANTY\s0
\&\s-1FOR\s0 \s-1THE\s0 \s-1SOFTWARE\s0, \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0. \s-1EXCEPT\s0 \s-1WHEN\s0
\&\s-1OTHERWISE\s0 \s-1STATED\s0 \s-1IN\s0 \s-1WRITING\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDERS\s0 \s-1AND/OR\s0 \s-1OTHER\s0 \s-1PARTIES\s0
\&\s-1PROVIDE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0, \s-1EITHER\s0
\&\s-1EXPRESSED\s0 \s-1OR\s0 \s-1IMPLIED\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. \s-1THE\s0
\&\s-1ENTIRE\s0 \s-1RISK\s0 \s-1AS\s0 \s-1TO\s0 \s-1THE\s0 \s-1QUALITY\s0 \s-1AND\s0 \s-1PERFORMANCE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1WITH\s0
\&\s-1YOU\s0. \s-1SHOULD\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1PROVE\s0 \s-1DEFECTIVE\s0, \s-1YOU\s0 \s-1ASSUME\s0 \s-1THE\s0 \s-1COST\s0 \s-1OF\s0 \s-1ALL\s0
\&\s-1NECESSARY\s0 \s-1SERVICING\s0, \s-1REPAIR\s0, \s-1OR\s0 \s-1CORRECTION\s0.
.PP
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0 \s-1OR\s0 \s-1AGREED\s0 \s-1TO\s0 \s-1IN\s0 \s-1WRITING\s0
\&\s-1WILL\s0 \s-1ANY\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0, \s-1OR\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1WHO\s0 \s-1MAY\s0 \s-1MODIFY\s0 \s-1AND/OR\s0
\&\s-1REDISTRIBUTE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1AS\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1THE\s0 \s-1ABOVE\s0 \s-1LICENCE\s0, \s-1BE\s0
\&\s-1LIABLE\s0 \s-1TO\s0 \s-1YOU\s0 \s-1FOR\s0 \s-1DAMAGES\s0, \s-1INCLUDING\s0 \s-1ANY\s0 \s-1GENERAL\s0, \s-1SPECIAL\s0, \s-1INCIDENTAL\s0,
\&\s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OR\s0 \s-1INABILITY\s0 \s-1TO\s0 \s-1USE\s0
\&\s-1THE\s0 \s-1SOFTWARE\s0 (\s-1INCLUDING\s0 \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0 \s-1LOSS\s0 \s-1OF\s0 \s-1DATA\s0 \s-1OR\s0 \s-1DATA\s0 \s-1BEING\s0
\&\s-1RENDERED\s0 \s-1INACCURATE\s0 \s-1OR\s0 \s-1LOSSES\s0 \s-1SUSTAINED\s0 \s-1BY\s0 \s-1YOU\s0 \s-1OR\s0 \s-1THIRD\s0 \s-1PARTIES\s0 \s-1OR\s0 A
\&\s-1FAILURE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1TO\s0 \s-1OPERATE\s0 \s-1WITH\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1SOFTWARE\s0), \s-1EVEN\s0 \s-1IF\s0
\&\s-1SUCH\s0 \s-1HOLDER\s0 \s-1OR\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1HAS\s0 \s-1BEEN\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0
\&\s-1SUCH\s0 \s-1DAMAGES\s0.
